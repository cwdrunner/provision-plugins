# set firstboot network configuration settings (eg hostname, domainname, DNS, NTP, etc)

{{ if eq (.Param "rs-debug-enable") true }}set -x{{ end }}

VMK="{{ .Param "esxi/network-firstboot-vmk" }}"

{{ if .ParamExists "esxi/network-firstboot-hostname" -}}
NAME={{ .Param "esxi/network-firstboot-hostname" }}
{{ else if .ParamExists "hostname" -}}
NAME={{ .Param "hostname" }}
{{ else -}}
NAME="{{ .Machine.Name }}"
{{ end -}}
HOSTNAME="$(echo ${NAME%%.*} | sed 's/\.$//')"
if [[ -z "$HOSTNAME" ]]
then
  echo "NOTICE: error getting a value to set hostname"
else
  echo "Setting hostname to: '$HOSTNAME'"
  [[ -n "$HOSTNAME" ]] && esxcli system hostname set --host="$HOSTNAME"
fi

###
#  Handle setting VLAN tagged portgroups if requested
###
{{ if .ParamExists "esxi/network-firstboot-vlan" -}}
VLAN_MGMT={{ .Param "esxi/network-firstboot-vlan" }}
SET_VLAN_MGMT="esxcli network vswitch standard portgroup set --portgroup-name=\"Management Network\" --vlan-id=$VLAN_MGMT"
{{ end -}}
{{ if .ParamExists "esxi/network-firstboot-vlan-vm-network" -}}
VLAN_VM={{ .Param "esxi/network-firstboot-vlan-vm-network" }}

if [[ ${VLAN_VM} = "management" ]]
then
  # set to same value as Management Network VLAN
  if [[ $VLAN_MGMT -ge 0 && $VLAN_MGMT -le 4096 ]]
  then
    VLAN_VM=$VLAN_MGMT
  else
    echo "FATAL: Requested 'VM Network' portgroup be set to value of 'Management"
    echo "       Network' VLAN - but Management VLAN did not validate to 0-4096"
    echo "       ** We should never have gotten here ... :( **"
    exit 1
  fi
elif [[ $VLAN_VM -ge 0 && $VLAN_VM -le 4096 ]]
then
  # valid VLAN value
  true
else
  echo "FATAL: Requested portgroup 'VM Network' be set to something, but failed"
  echo "       validation checks.  Must be 'management' or range between the"
  echo "       numbers '0-4095'"
  exit 1
fi

SET_VLAN_VM="esxcli network vswitch standard portgroup set --portgroup-name=\"VM Network\" --vlan-id=$VLAN_VM"
{{ end -}}

{{ if .ParamExists "esxi/network-firstboot-mtu" -}}
UPLINK=$(esxcfg-vswitch --list | grep "Management Network" | head -1 | awk ' { print $NF } ')
VSWITCH=$(esxcfg-vswitch --list | grep -v "^ " | grep "${UPLINK}" | head -1 | awk ' { print $1 } ')
SET_MTU_VSW="esxcfg-vswitch --mtu={{ .Param "esxi/network-firstboot-mtu" }} $VSWITCH"
SET_MTU_VMK="esxcli --mtu={{ .Param "esxi/network-firstboot-mtu" }} --interface-name=$VMK"
{{ end -}}

[[ -n "$SET_VLAN_MGMT" ]] && eval ${SET_VLAN_MGMT}
[[ -n "$SET_VLAN_VM"   ]] && eval ${SET_VLAN_VM}
[[ -n "$SET_MTU_VSW"   ]] && eval ${SET_MTU_VSW}
[[ -n "$SET_MTU_VMK"   ]] && eval ${SET_MTU_VMK}

{{ if eq (.Param "esxi/network-firstboot-type") "manual" }}

IP="{{ .Param "esxi/network-firstboot-ipaddr" }}"
NM="{{ .Param "esxi/network-firstboot-netmask" }}"
GW="{{ .Param "esxi/network-firstboot-gateway" }}"
for CHECK in "ipaddr:$IP" "netmask:$NM" "gateway:$GW" "vmkernel_interface:$VMK"
do
  T=$(echo $CHECK | cut -d":" -f1)
  V=$(echo $CHECK | cut -d":" -f1)
  [[ -z "$V" ]] && (echo "FATAL: Required value ('$T') missing for 'manual' network config."; exit 1)
done
esxcli network ip interface ipv4 set --type=static --interface-name="${VMK}" --ipv4="${IP}" --netmask="${NM}" --gateway="${GW}"
esxcfg-route ${GW}
esxcli system syslog reload
/bin/services.sh restart

{{ else if eq (.Param "esxi/network-firstboot-type") "dhcp" -}}

esxcli network ip interface ipv4 set --interface-name=${VMK} --type=dhcp
esxcli system syslog reload
/bin/services.sh restart
{{ else -}}
echo "WARNING: 'esxi/network-firstboot-type' unsupported ... ('{{ .Param "esxi/network-firstboot-type" }}')."
{{ end -}}

{{ if .ParamExists "dns-domain" -}}
echo "Getting domain name from Param 'dns-domain'"
DOMAIN="{{ .Param "dns-domain" }}"
{{ else -}}
echo "Trying to get domain name from parsing '$NAME'"
DOMAIN=$(echo ${NAME#*.} | sed 's/\.$//')
[[ "$DOMAIN" = "$HOSTNAME" ]] && DOMAIN=""
{{ end -}}

[[ -n "$DOMAIN" ]] && esxcli system hostname set --domain $DOMAIN

{{ if .ParamExists "dns-search-domains" -}}
{{ range $key, $search := .Param "dns-search-domains" -}}
  SEARCH="{{ $search }}"
  echo "Adding '$SEARCH' to the domain search path"
  [[ -n "$SEARCH" ]] && esxcli network ip dns search add --domain="$SEARCH"
{{ end -}}
{{ else -}}
  echo "Setting dns search to: '$DOMAIN'"
  [[ -n "$SEARCH" ]] && esxcli network ip dns search add --domain="$SEARCH"
{{ end -}}

{{ if .ParamExists "dns-servers" -}}
{{ range $key, $dns := .Param "dns-servers" -}}
DNS="{{ $dns }}"
[[ -n "$DNS" ]] && esxcli network ip dns server add --server="$DNS"
{{ end -}}
{{ else -}}
# maybe check if we have this from lease ?
{{ end -}}

{{ if .ParamExists "esxi/ntp-conf" -}}

{{ $tmpl := (.Param "esxi/ntp-conf") -}}
echo "Setting NTP config from template '{{ .Param "esxi/ntp-conf" }}'"
cat >/etc/ntp.conf <<NTPCONFIG
{{ .CallTemplate $tmpl .}}
NTPCONFIG
TWIDDLE_NTP="yes"

{{ else -}}

{{ if .ParamExists "ntp-servers" -}}

echo "Setting NTP from built in tooling..."
cat >/etc/ntp.conf <<NTPCONFIG
# installed by Digital Rebar Provision during provisioniing...
# to completely customize NTP settings, see the 'esxi/ntp-conf'
# param to provide your own NTP config template
restrict default kod nomodify notrap noquerynopeer
restrict 127.0.0.1

{{range $key, $ntp := .Param "ntp-servers" -}}
server {{ $ntp }} iburst
{{ end -}}
NTPCONFIG

TWIDDLE_NTP="yes"

{{ end -}}
{{ end -}}

if [[ -n "$TWIDDLE_NTP" ]]
then
  echo "Setting and starting 'ntpd' sevices to be on"
  /sbin/chkconfig ntpd on
  /etc/init.d/ntpd restart
fi
