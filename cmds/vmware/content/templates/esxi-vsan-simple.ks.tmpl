#########################################
#
# This is a Kickstart template intended to be embedded in an ESXi kickstart.
# This templates should be placed in the "%firstboot" section for any ESXi
# node you wish to setup as a VSAN appliance.
#
#########################################

%pre --interpreter=busybox
echo "SECTION: %pre --interpreter=busybox"

%firstboot --interpreter=busybox
echo "SECTION: %firstboot --interpreter=busybox"

vsan_syslog_key = "VSAN-KS"

logger $vsan_syslog_key " Reconfiguring VSAN Default Policy"
esxcli vsan policy setdefault -c vdisk -p "((\"hostFailuresToTolerate\" i1) (\"forceProvisioning\" i1))"
esxcli vsan policy setdefault -c vmnamespace -p "((\"hostFailuresToTolerate\" i1) (\"forceProvisioning\" i1))"

logger $vsan_syslog_key "Enabling VSAN Traffic on vmk0"
esxcli vsan network ipv4 add -i vmk0

# assign license
{{if .ParamExists "vsan/license"}}vim-cmd vimsvc/license --set {{ .Param "vsan/license" }}{{else}}# no license specified, installing in evaluation mode{{end}}

%firstboot --interpreter=python
print("SECTION: %firstboot --interpreter=busybox")

import commands, os, uuid, syslog

vsan_syslog_key = "VSAN-KS"
debug = False

# Build VSAN Disk Group command based on vdq -q output
def createVsanDiskGroup():
 vdqoutput = eval(commands.getoutput("/sbin/vdq -q"))
 md = []
 ssd = ''
 for i in vdqoutput:
 if i['State'] == 'Eligible for use by VSAN':
 if i['Reason'] == 'Non-local disk':
 syslog.syslog(vsan_syslog_key + " Setting enable_local and reclaiming " + i['Name'])
 if debug == False:
 os.system("esxcli storage nmp satp rule add -s VMW_SATP_LOCAL -o enable_local -d " + i['Name'])
 os.system("esxcli storage core claiming reclaim -d " + i['Name'])
 if i['IsSSD'] == '1':
 ssd = i['Name']
 else:
 md.append(i['Name'])

 diskgroup_cmd = 'esxcli vsan storage add -s ' + ssd + ' -d ' + ' -d '.join(md)
 syslog.syslog(vsan_syslog_key + " Creating VSAN Disk Group using SSD: " + ssd +  " MD: " + ', '.join(md))
 if debug == False:
 os.system(diskgroup_cmd)

# Create VSAN Cluster (required only for first ESXi node)
def createVsanCluster():
 # generate UUID for VSAN Cluster
 vsan_uuid = str(uuid.uuid4())

 syslog.syslog(vsan_syslog_key + " Creating VSAN Cluster using UUID: " + vsan_uuid)
 if debug == False:
 os.system("esxcli vsan cluster join -u " + vsan_uuid)

createVsanDiskGroup()
createVsanCluster()
