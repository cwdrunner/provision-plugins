# Copyright 2012 Cloudbase Solutions Srl
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import os
import requests

from oslo_log import log as oslo_logging

from cloudbaseinit import exception
from cloudbaseinit.metadata.services import base

LOG = oslo_logging.getLogger(__name__)

class FileService(base.BaseMetadataService):

    def __init__(self):
        super(base.BaseMetadataService, self).__init__()
        self._config_type = "rackn"
        self._base_path = None
        self._meta_data = None
        self._user_data = None

    def load(self):
        self._base_path = "{{.ParamExpand "image-deploy/cloud-init-base-url"}}"
        if self._base_path.startswith("file://"):
            self._base_path = self._base_path[7:]
        return True

    def _get_data(self, path):
        if self._base_path.startswith("/"):
            norm_path = os.path.normpath(os.path.join(self._base_path, path))
            try:
                with open(norm_path, 'rb') as stream:
                    return stream.read()
            except IOError:
                raise base.NotExistingMetadataException()

        url = self._base_path + path
        method = 'GET'
        LOG.debug('Executing http request %s at %s', method, url)
        response = requests.request(method=method, url=url, verify=True)
        response.raise_for_status()
        return response.content

    def cleanup(self):
        self._base_path = None

    def get_user_data(self):
        if self._user_data:
            return self._user_data
        self._user_data = self._get_data("user-data")
        return self._user_data

    def _get_meta_data(self):
        if self._meta_data:
            return self._meta_data

        raw_meta_data = self._get_data("meta-data")
        try:
            self._meta_data = self._parse_data(raw_meta_data)
        except Exception:
            LOG.warning("Metadata could not be parsed")

        return self._meta_data

    def get_host_name(self):
        return self._get_meta_data().get('local-hostname')

    def get_instance_id(self):
        return self._get_meta_data().get('instance-id')

    def get_public_keys(self):
        ssh_keys = self._get_meta_data().get('public-keys')
        if not ssh_keys:
            return []
        return ssh_keys

    def get_admin_username(self):
        return self._get_meta_data().get('admin-username')

    def get_admin_password(self):
        return self._get_meta_data().get('admin-password')
